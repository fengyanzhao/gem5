//
// Copyright (c) Tianjin University
// All rights reserved
//
// Author: Li Yinnan
//


let {{
    
    #header_output = ""
    #decoder_output = ""
    #exec_output = ""
    
    #Comp_Init
    code = '''
        
        ThreadContext *tc = xc->tcBase();
        /*tc->setIntReg() just use initialize isox registers,we will move it after modification of linux*/
       /* tc->setIntReg(INTREG_COMP_BASE,0x000100f4);
        tc->setIntReg(INTREG_COMP_SIZE,0x1000);
        tc->setIntReg(INTREG_CPT_BASE,0x00011000);
        tc->setIntReg(INTREG_CPT_SIZE,0x30);
        tc->setIntReg(INTREG_COMP_ID,5);
        tc->setIntReg(INTREG_PHYS_ADDR,0x000100f4); */
        //CTEntry &cte = isox.getEntry(isoxargus.comp_id);
        CTEntry &cte = isox.getEntry(tc->readIntReg(INTREG_COMP_ID));

        cte.comp_base = tc->readIntReg(INTREG_COMP_BASE);
        // cte.comp_base = isoxargus.comp_base;
        cte.comp_size = tc->readIntReg(INTREG_COMP_SIZE);
        // cte.comp_size = isoxargus.comp_size;
        cte.comp_hash("");
        cte.page_count = 0;
        //cte.cpt_base = isoxargus.cpt_base;
        //cte.cpt_size = isoxargus.cpt_size;
        cte.cpt_base = tc->readIntReg(INTREG_CPT_BASE);
        cte.cpt_size = tc->readIntReg(INTREG_CPT_SIZE);

        Request::Flags memAccessFlags = Request::CACHE_BLOCK_ZERO|ArmISA::TLB::MustBeOne;
        //Request::Flags memAccessFlags = Request::PRIVILEGED|ArmISA::TLB::MustBeOne;
        EA = cte.cpt_base;
        size_t size = cte.cpt_size;
    '''
    mnem = "comp_init"
    
    iop = InstObjParams(mnem, mnem.capitalize(), "PredOp",
                        {"code": code,
                         "predicate_test": predicateTest},
                        ["IsStore","IsSerializeBefore"])

    #global header_output, decoder_output, exec_output
    header_output += CompDeclare.subst(iop)
    decoder_output += CompConstructor.subst(iop)
    exec_output += CompExecute.subst(iop)

    #Cpage_Map
    code = '''
        CTEntry &cte = isox.getEntry(xc->tcBase()->readIntReg(INTREG_COMP_ID));

        for(Addr Vaddr = cte.comp_base; Vaddr <= cte.comp_base + cte.comp_size; Vaddr++)
        {
            union MemUnion {
                uint8_t bytes[4];
                uint32_t intRegBits[1];
            };
            Addr ttbr = isox.readCPTBASEReg();
            Addr l1desc_addr = mbits(ttbr, 31, 14) | (bits(Vaddr, 31, 20) << 2);
            MemUnion memUnion;
            uint8_t *dataPtr = memUnion.bytes;
            fault = xc->readMem(l1desc_addr, dataPtr, 4, Request::PRIVILEGED);
            Addr Paddr = memUnion.intRegBits[0];

            if(!isox.getCMV(Paddr))
            {
                isox.setCMV(Paddr, 1);

                ++cte.page_count;
            }
        }
        //hash not implemented
    '''
    mnem = "cpage_map"
    
    iop = InstObjParams(mnem, mnem.capitalize(), "PredOp",
                        {"code": code,
                         "predicate_test": predicateTest},
                        ["IsStore","IsSerializeBefore"])

    #global header_output, decoder_output, exec_output
    header_output += CompDeclare.subst(iop)
    decoder_output += CompConstructor.subst(iop)
    exec_output += PredOpExecute.subst(iop)

    #Comp_Enter
    code = '''
        isox.setCCRIDReg(xc->tcBase()->readIntReg(INTREG_COMP_ID));

        isox.setPSRReg(1);
        
        LR = PC - 4;

        setNextPC(xc, isox.readCCRCTReg().comp_base);
    '''
    mnem = "comp_enter"
    
    iop = InstObjParams(mnem, mnem.capitalize(), "PredOp",
                        {"code": code,
                         "predicate_test": predicateTest},
                        ["IsStore","IsSerializeBefore"])

    #global header_output, decoder_output, exec_output
    header_output += CompDeclare.subst(iop)
    decoder_output += CompConstructor.subst(iop)
    exec_output += PredOpExecute.subst(iop)

    #Cpage_Revoke
    code = '''
        CTEntry &cte = isox.getEntry(xc->tcBase()->readIntReg(INTREG_COMP_ID));

        Request::Flags memAccessFlags = Request::PRIVILEGED|ArmISA::TLB::MustBeOne;
        EA = isoxargus.phys_addr;/*isoxargus need replace by tc->readIntReg()*/
        size_t size = isoxargus.page_bits;

        isox.setCMV(isoxargus.phys_addr, 0);

        --cte.page_count;
    '''
    mnem = "cpage_revoke"
    
    iop = InstObjParams(mnem, mnem.capitalize(), "PredOp",
                        {"code": code,
                         "predicate_test": predicateTest},
                        ["IsStore","IsSerializeBefore"])

    #global header_output, decoder_output, exec_output
    header_output += CompDeclare.subst(iop)
    decoder_output += CompConstructor.subst(iop)
    exec_output += CompExecute.subst(iop)

    #Comp_Resume
    code = '''
        CPSR cpsr = Cpsr;

        isox.setCCRIDReg(xc->tcBase()->readIntReg(INTREG_COMP_ID));

        cpsr.mode = MODE_USER;
       /*  for (int i = 0; i < 16; i++)
         {
          tc->setIntReg(i,metapage.isoxregs[i]);
         }
       */
       // ThreadContext *tc = xc->tcBase();
        //copyRegs(metapage.tc, tc);

        isox.setPSRReg(1);
    '''
    mnem = "comp_resume"
    
    iop = InstObjParams(mnem, mnem.capitalize(), "PredOp",
                        {"code": code,
                         "predicate_test": predicateTest},
                        ["IsStore","IsSerializeBefore"])

    #global header_output, decoder_output, exec_output
    header_output += CompDeclare.subst(iop)
    decoder_output += CompConstructor.subst(iop)
    exec_output += PredOpExecute.subst(iop)

    #Comp_Leave
    code = '''
         ThreadContext *tc = xc->tcBase();
    for (int i = 0; i < 16; i++)
    {
       metapage.isoxregs[i] =tc->readIntReg(i);
    }
     for (int i = 1; i < 8; i++)
    {
       tc->setIntReg(i,0);
    }

       // copyRegs(tc, metapage.tc);
       // zeroRegisters(tc);
         // tc->clearArchRegs();
          //tc->copyArchRegs(tc);

        CTEntry &cte = isox.getEntry(isox.readCCRIDReg());
        cte.comp_base = isox.readCCRCTReg().comp_base;
        cte.comp_size = isox.readCCRCTReg().comp_size;
        cte.comp_hash = isox.readCCRCTReg().comp_hash;
        cte.page_count = isox.readCCRCTReg().page_count;
        cte.cpt_base = isox.readCCRCTReg().cpt_base;
        cte.cpt_size = isox.readCCRCTReg().cpt_size;

        isox.setPSRReg(0);
    '''
    mnem = "comp_leave"
    
    iop = InstObjParams(mnem, mnem.capitalize(), "PredOp",
                        {"code": code,
                         "predicate_test": predicateTest},
                        ["IsStore","IsSerializeBefore"])

    #global header_output, decoder_output, exec_output
    header_output += CompDeclare.subst(iop)
    decoder_output += CompConstructor.subst(iop)
    exec_output += PredOpExecute.subst(iop)
   
    #rct
    code = "Dest = resTemp = secondOp;"
    mnem = "rct"
    regRegCode = secondOpRe.sub(regRegOp2, code)
    iop = InstObjParams(mnem, mnem.capitalize(),
                          "DataRegRegOp",
                          {"code" : regRegCode,
                           "predicate_test": pickPredicate(regRegCode)})
    #global header_output, decoder_output, exec_output
    header_output += DataRegRegDeclare.subst(iop)
    decoder_output += DataRegRegConstructor.subst(iop)
    exec_output += PredOpExecute.subst(iop)
}};

